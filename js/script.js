const TELEGRAM_BOT_TOKEN = '8472754597:AAHCkQVxbosnVu6RM0U4HyL63DWlurjEziY';
const TELEGRAM_CHAT_ID = '-4879308527';

// Language translations
const translations = {
    uk: {
        title: '–í–ª–∞—Å–Ω–∏–∫ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è',
        subtitle: '–Ø–∫—â–æ –º–æ—î –∞–≤—Ç–æ –∑–∞–≤–∞–∂–∞—î, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤\'—è–∂—ñ—Ç—å—Å—è –∑—ñ –º–Ω–æ—é. –Ø —à–≤–∏–¥–∫–æ –ø–µ—Ä–µ—Å—Ç–∞–≤–ª—é –º–∞—à–∏–Ω—É!',
        phone: '–ü–æ–¥–∑–≤–æ–Ω–∏—Ç–∏',
        notification: '–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è',
        notificationTitle: '–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è',
        choosePhoto: '–û–±—Ä–∞—Ç–∏ —Ñ–æ—Ç–æ',
        photoUploadTitle: '–ü—Ä–∏–∫—Ä—ñ–ø–∏—Ç–∏ —Ñ–æ—Ç–æ (–Ω–µ–æ–±–æ–≤\'—è–∑–∫–æ–≤–æ)',
        blocked: '–ó–∞–≤–∞–∂–∞—î –ø—Ä–æ—ó–∑–¥—É',
        accident: '–î–¢–ü',
        alarm: '–ó–≤—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ñ–∑–∞—Ü—ñ—è',
        light: '–ì–æ—Ä–∏—Ç—å —Å–≤—ñ—Ç–ª–æ',
        window: '–í—ñ–¥–∫—Ä–∏—Ç–µ –≤—ñ–∫–Ω–æ',
        evacuation: '–ï–≤–∞–∫—É–∞—Ü—ñ—è',
        flatTire: '–°–ø—É—â–µ–Ω–µ –∫–æ–ª–µ—Å–æ',
        other: '–Ü–Ω—à–µ',
        messageTitle: '–ó–∞–ª–∏—à–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è',
        messagePlaceholder: '–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...',
        namePlaceholder: '–í–∞—à–µ —ñ–º\'—è (–Ω–µ–æ–±–æ–≤\'—è–∑–∫–æ–≤–æ)',
        send: '–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏',
        footer: '–°–∫–∞–Ω—É–π—Ç–µ QR-–∫–æ–¥ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É',
        sending: '–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ...',
        successMessage: '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ! üéâ',
        errorMessage: '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ',
        emptyMessage: '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è',
        sendingNotification: '–í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è...'
    },
    en: {
        title: 'Car Owner',
        subtitle: 'If my car is blocking you, please contact me. I\'ll move it quickly!',
        phone: 'Call',
        notification: 'Send notification',
        notificationTitle: 'Select notification',
        choosePhoto: 'Choose photo',
        photoUploadTitle: 'Attach photo (optional)',
        blocked: 'Blocking the way',
        accident: 'Accident',
        alarm: 'Alarm is sounding',
        light: 'Lights are on',
        window: 'Window is open',
        evacuation: 'Evacuation',
        flatTire: 'Flat tire',
        other: 'Other',
        messageTitle: 'Leave a Message',
        messagePlaceholder: 'Write your message...',
        namePlaceholder: 'Your name (optional)',
        send: 'Send',
        footer: 'Scan QR code for quick access',
        sending: 'Sending...',
        successMessage: 'Message sent successfully! üéâ',
        errorMessage: 'Sending error. Please try later or call',
        emptyMessage: 'Please enter a message',
        sendingNotification: 'Sending notification...'
    }
};

let currentLanguage = 'uk';

// Function to switch language
function switchLanguage(lang) {
    currentLanguage = lang;
    
    // Update active button
    document.querySelectorAll('.lang-btn').forEach(btn => {
        btn.classList.remove('active');
        if (btn.dataset.lang === lang) {
            btn.classList.add('active');
        }
    });

    // Update all elements with translations
    document.querySelectorAll('[data-translate]').forEach(element => {
        const key = element.dataset.translate;
        if (translations[lang] && translations[lang][key]) {
            element.textContent = translations[lang][key];
        }
    });

    // Update placeholders
    document.querySelectorAll('[data-translate-placeholder]').forEach(element => {
        const key = element.dataset.translatePlaceholder;
        if (translations[lang] && translations[lang][key]) {
            element.placeholder = translations[lang][key];
        }
    });

    // Save selected language
    localStorage.setItem('selectedLanguage', lang);
}

// Language initialization
function initLanguage() {
    const savedLang = localStorage.getItem('selectedLanguage') || 'uk';
    switchLanguage(savedLang);
}

// Function to change avatar
function changeAvatar(imageUrl) {
    const avatar = document.getElementById('carAvatar');
    avatar.src = imageUrl;
    avatar.onerror = function() {
        // If image fails to load, show a placeholder
        this.style.display = 'none';
        const placeholder = document.createElement('div');
        placeholder.className = 'car-icon-placeholder';
        placeholder.textContent = 'üöó';
        this.parentElement.appendChild(placeholder);
    };
}

// Function to show status messages
function showStatus(message, type) {
    // Remove previous statuses
    document.querySelectorAll('.status-message').forEach(el => el.remove());
    
    const statusDiv = document.createElement('div');
    statusDiv.className = `status-message status-${type}`;
    statusDiv.textContent = message;
    statusDiv.style.display = 'block';
    
    const form = document.getElementById('messageForm');
    form.insertBefore(statusDiv, form.firstChild);
    
    // Automatically hide after 5 seconds
    setTimeout(() => {
        statusDiv.style.display = 'none';
    }, 5000);
}

// Function to create a ripple effect
function createRippleEffect(element, event) {
    const ripple = document.createElement('div');
    ripple.style.cssText = `
        position: absolute;
        border-radius: 50%;
        background: rgba(255,255,255,0.3);
        transform: scale(0);
        animation: ripple 0.6s linear;
        pointer-events: none;
    `;
    
    const rect = element.getBoundingClientRect();
    const size = Math.max(rect.width, rect.height);
    ripple.style.width = ripple.style.height = size + 'px';
    ripple.style.left = (event.clientX - rect.left - size/2) + 'px';
    ripple.style.top = (event.clientY - rect.top - size/2) + 'px';
    
    element.appendChild(ripple);
    
    setTimeout(() => ripple.remove(), 600);
}

// Initialize event listeners
function initEventListeners() {
    // Handlers for the language switcher
    document.querySelectorAll('.lang-btn').forEach(btn => {
        btn.addEventListener('click', () => {
            switchLanguage(btn.dataset.lang);
        });
    });

    // Ripple effect for contact buttons
    document.querySelectorAll('.contact-btn').forEach(btn => {
        btn.addEventListener('click', function(e) {
            createRippleEffect(this, e);
        });
    });

    // Handle form submission
    document.getElementById('messageForm').addEventListener('submit', handleFormSubmit);

    // --- New code for notifications ---
    const modal = document.getElementById('notificationModal');
    const openBtn = document.getElementById('openNotificationModal');
    const closeBtn = document.querySelector('.modal .close-btn');

    openBtn.addEventListener('click', () => {
        modal.style.display = 'flex';
    });

    closeBtn.addEventListener('click', () => {
        modal.style.display = 'none';
    });

    // Close modal when clicking outside of it
    window.addEventListener('click', (event) => {
        if (event.target === modal) {
            modal.style.display = 'none';
        }
    });

    // Handle option selection and submission
    document.querySelectorAll('.option-btn').forEach(btn => {
        btn.addEventListener('click', async function() {
            // Remove 'selected' from all buttons and add to the clicked one
            document.querySelectorAll('.option-btn').forEach(b => b.classList.remove('selected'));
            this.classList.add('selected');

            const messageType = this.dataset.type;
            const notificationMessage = translations[currentLanguage][messageType];
            const photoFile = document.getElementById('photoInput').files[0];
            
            showStatus(translations[currentLanguage].sendingNotification, 'success');
            
            if (photoFile) {
                await sendTelegramPhoto(notificationMessage, photoFile);
            } else {
                await sendTelegramMessage(`üöó ${translations[currentLanguage].notification}:\n\n` + `‚ùóÔ∏è ${notificationMessage}`);
            }

            modal.style.display = 'none';
            document.getElementById('photoInput').value = ''; // Reset file input
        });
    });
}

// Handle form submission
async function handleFormSubmit(e) {
    e.preventDefault();
    
    const messageText = document.getElementById('messageText').value.trim();
    const senderName = document.getElementById('senderName').value.trim();
    const sendBtn = document.querySelector('.send-btn');
    const sendBtnText = sendBtn.querySelector('[data-translate="send"]');
    
    if (!messageText) {
        showStatus(translations[currentLanguage].emptyMessage, 'error');
        return;
    }
    
    // Disable the button during sending
    sendBtn.disabled = true;
    sendBtnText.textContent = translations[currentLanguage].sending;
    
    try {
        const message = createTelegramMessage(messageText, senderName);
        const success = await sendTelegramMessage(message);
        
        if (success) {
            showStatus(translations[currentLanguage].successMessage, 'success');
            document.getElementById('messageForm').reset();
        } else {
            throw new Error('Sending failed');
        }
        
    } catch (error) {
        console.error('Error:', error);
        showStatus(translations[currentLanguage].errorMessage, 'error');
    } finally {
        // Re-enable the button
        sendBtn.disabled = false;
        sendBtnText.textContent = translations[currentLanguage].send;
    }
}

// Create message for Telegram
function createTelegramMessage(messageText, senderName) {
    const langPrefix = currentLanguage === 'uk' ? '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Å–∞–π—Ç—É –∞–≤—Ç–æ–º–æ–±—ñ–ª—è' : 'Message from car website';
    const fromText = currentLanguage === 'uk' ? '–í—ñ–¥' : 'From';
    const dateLocale = currentLanguage === 'uk' ? 'uk-UA' : 'en-US';
    
    return `üöó ${langPrefix}:\n\n` +
           `üí¨ ${messageText}\n\n` +
           `${senderName ? `üë§ ${fromText}: ${senderName}\n` : ''}` +
           `üïê ${new Date().toLocaleString(dateLocale)}`;
}

// Send message to Telegram
async function sendTelegramMessage(message) {
    try {
        const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                chat_id: TELEGRAM_CHAT_ID,
                text: message,
                parse_mode: 'HTML'
            })
        });
        
        return response.ok;
    } catch (error) {
        console.error('Telegram API Error:', error);
        return false;
    }
}

// Function to send a photo with a caption to Telegram
async function sendTelegramPhoto(caption, photoFile) {
    const formData = new FormData();
    formData.append('chat_id', TELEGRAM_CHAT_ID);
    formData.append('caption', `üöó ${translations[currentLanguage].notification}:\n\n` + `‚ùóÔ∏è ${caption}`);
    formData.append('photo', photoFile);

    try {
        const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendPhoto`, {
            method: 'POST',
            body: formData
        });

        if (response.ok) {
            showStatus(translations[currentLanguage].successMessage, 'success');
        } else {
            showStatus(translations[currentLanguage].errorMessage, 'error');
        }
        return response.ok;
    } catch (error) {
        console.error('Telegram API Error:', error);
        showStatus(translations[currentLanguage].errorMessage, 'error');
        return false;
    }
}

// Initialization on page load
window.addEventListener('load', () => {
    initLanguage();
    initEventListeners();
    
    console.log('üöó Car owner contact website loaded successfully!');
    
    // INSTRUCTION: To change the avatar, uncomment and replace the URL below
    // changeAvatar('https://your-domain.com/your-avatar.png');
});